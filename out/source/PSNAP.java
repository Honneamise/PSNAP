/* autogenerated by Processing revision 1286 on 2022-11-02 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class PSNAP extends PApplet {


/**********/







/**********/
PFont FONT = null;

Options OPTIONS = null;

Stat STAT = null;

CardManager CARDMANAGER = null;

DeckManager DECKMANAGER = null;

/*
void settings()
{
    
}
*/    
    
/**********/
 public void setup() 
{
    //init
    /* size commented out by preprocessor */;
    /* smooth commented out by preprocessor */;
    frameRate(30);

    rectMode(CENTER);

    //font and text
    FONT = createFont("font.ttf", 48);
    textFont(FONT);
    textAlign(CENTER, CENTER);

    //run the loader
    LOADER = new Loader();
    LOADER.start();

    noLoop();
}

/**********/
 public void draw_stat()
{
    image(OPTIONS.bg_image, 0, 0, width, height);

    noFill();
    strokeJoin(ROUND);
    strokeWeight(7.5f);

    stroke(OPTIONS.bg_color);
    rect(width/2+3, 150+3, 375, 275, 50);
    stroke(OPTIONS.fg_color);
    rect(width/2, 150, 375, 275, 50);
     
    stroke(OPTIONS.bg_color);
    rect(width/2+3, 450+3, 375, 275, 50);
    stroke(OPTIONS.fg_color);
    rect(width/2, 450, 375, 275, 50);

    fill(OPTIONS.bg_color);
    text(STAT.getGeneralString(), width/2+3, 150+3, 375, 275);
    fill(OPTIONS.fg_color);
    text(STAT.getGeneralString(), width/2, 150, 375, 275);

    fill(OPTIONS.bg_color);
    text(STAT.getRecentString(), width/2+3, 450+3, 375, 275);
    fill(OPTIONS.fg_color);
    text(STAT.getRecentString(), width/2, 450, 375, 275);


} 

/**********/
 public void draw_deck()
{
    int y_offset = 600;

    Deck deck = DECKMANAGER.selected;

    int counter = 0;

    for(int i=0; i<3; i++)
    {
        for(int j=0; j<4; j++)
        {
            Card card = deck.cards.get(counter);

            image(card.image, j*100, y_offset + i*100, 100, 100);

            counter++;
        }
    }
} 

/**********/
 public void draw() 
{    
    background(120);

    if(!LOADER.finished())
    {
        text("LOADING...", width/2, height/2, width, height);
        return;
    }
    
    draw_stat();

    draw_deck();
}
/*
to convert all images in a folder use :
mogrify -format png *.*
*/

public static final String CARDS_FILE = "cards.json";

/**********/
class Card
{ 
    String name;
    PImage image;
    int cost;
    int power;
    String activate;
    String ability;
    
    Card(JSONObject obj)
    {
        name = obj.getString("name");
        image = loadImage( obj.getString("image") );
        cost = obj.getInt("cost");
        power = obj.getInt("power");
        activate = obj.getString("activate");
        ability = obj.getString("ability");
    }
   
}


/**********/
class CardManager
{ 
    HashMap<String,Card> cards;
    
    /**********/
    CardManager()
    {
        cards = new HashMap<String,Card>();
        
        JSONArray objs = loadJSONArray(CARDS_FILE);

        for (int i=0; i<objs.size(); i++) 
        {
            JSONObject obj = objs.getJSONObject(i); 
        
            String id = obj.getString("id");
            
            Card card = new Card(obj);
            
            if(cards.get(id)==null) { cards.put(id,card); }
            else { throw new RuntimeException("CARD MANAGER ERROR"); }
        }
    }
    
    /**********/
     public Card get(String id) 
    {
        return cards.get(id);
    }

}

public static final String PLAY_FILE = "PlayState.json";
public static final String COLLECTION_FILE = "CollectionState.json";

/**********/
class Deck
{ 
    String name;
    ArrayList<Card> cards;
    
    /**********/
    Deck(JSONObject obj)
    {
        name = obj.getString("Name");
        
        JSONArray _cards = obj.getJSONArray("Cards");
        
        cards = new ArrayList<Card>();
        
        for (int i=0; i<_cards.size(); i++) 
        {
            JSONObject _card =  _cards.getJSONObject(i); 
        
            String card_id = _card.getString("CardDefId");
            
            Card card = CARDMANAGER.get(card_id);
            
            if(card==null || cards.contains(card)) { throw new RuntimeException("DECK MANAGER ERROR");  }
            else { cards.add(card); }
        }

        //sort the array by cost
        Collections.sort(cards, new Comparator<Card>(){
            public int compare (Card a, Card b) {
                if(a.cost==b.cost) { return 0; }
                return a.cost < b.cost ? -1 : 1;
            }
        });
    }
}


/**********/
class DeckManager extends TimerTask 
{ 
    HashMap<String,Deck> decks;
    File decks_file;
    long decks_ts;
    
    Deck selected;
    File selected_file;
    long selected_ts;
    
    java.util.Timer timer;
    
    /**********/
    DeckManager()
    {
        decks_file = new File(OPTIONS.path + COLLECTION_FILE);
        decks_ts = decks_file.lastModified();
        update_decks();
        
        selected_file = new File(OPTIONS.path + PLAY_FILE);
        selected_ts = selected_file.lastModified();
        update_selected();

        timer = new java.util.Timer();
    
        timer.schedule( this, new Date(), 1000 );
    }
    
    /**********/
     public void update_decks()
    {
        decks = new HashMap<String,Deck>();
        
        JSONObject obj = loadJSONObject(decks_file);

        JSONObject serverstate = obj.getJSONObject("ServerState");
        
        JSONArray _decks = serverstate.getJSONArray("Decks");

        for (int i=0; i<_decks.size(); i++) 
        { 
            JSONObject _deck = _decks.getJSONObject(i); 
        
            String deck_id = _deck.getString("Id");
            
            Deck deck = new Deck(_deck);
            
            if(decks.get(deck_id)==null) { decks.put(deck_id,deck); }
            else { throw new RuntimeException("DECK MANAGER ERROR"); }
        }
        
    }
    
    /**********/
     public void update_selected()
    {
        JSONObject obj = loadJSONObject(selected_file);
            
        String deck_id = obj.getString("SelectedDeckId");
        
        selected = decks.get(deck_id);
    }
    
    /**********/
     public void run() 
    {
        if( decks_ts != decks_file.lastModified() ) 
        {
            decks_ts = decks_file.lastModified();
            
            update_decks(); 
        }
        
        if( selected_ts != selected_file.lastModified() ) 
        {
            selected_ts = selected_file.lastModified();
            
            update_selected();
            
            redraw();
        }
    }
}
Loader LOADER = null;

/**********/
class Loader extends Thread
{
    Object lock;
    boolean finished;

    Loader()
    {
        finished = false;
        lock = new Object();
    }

     public boolean finished()
    {
        boolean f;

        synchronized(lock)
        {
            f = finished;
        }

        return f;
    }

     public void run()
    {
        OPTIONS = new Options();  

        STAT = new Stat();

        CARDMANAGER = new CardManager();

        DECKMANAGER = new DeckManager();
            
        //ok, all loaded
        synchronized(lock)
        {
            //set flag
            finished = true;

            redraw();
        }
    }
}
public static final String OPTIONS_FILE = "options.json";

/**********/
class Options
{
    String path;
    int bg_color;
    int fg_color;
    PImage bg_image;

    /**********/
    Options()
    {
        int val = 0;
        String s = "";

        JSONObject obj = loadJSONObject(OPTIONS_FILE);
            
        path = obj.getString("path");

        s = obj.getString("bg_color");
        val = Integer.parseInt(s,16);
        bg_color = color(red(val), green(val), blue(val));

        s = obj.getString("fg_color");
        val = Integer.parseInt(s,16);
        fg_color = color(red(val), green(val), blue(val));

        s = obj.getString("bg_image");
        bg_image = loadImage(s);   
    }
    
}
public static final String PROFILE_FILE = "ProfileState.json";

/**********/
class Stat extends TimerTask 
{ 
    File file;
    long ts;
    
    int rank;
    int victory;
    int defeat;
    
    int streak;
    float rate;
    
    java.util.Timer timer;
    
    /**********/
    Stat()
    {
        file = new File(OPTIONS.path + PROFILE_FILE);
        
        ts = file.lastModified();
     
        update();
        
        timer = new java.util.Timer();
    
        timer.schedule( this, new Date(), 1000 );
    }
      
    /**********/
     public void update()
    {

        JSONObject obj = loadJSONObject(file);
            
        JSONObject serverstate = obj.getJSONObject("ServerState");
            
        JSONObject ranklog = serverstate.getJSONObject("RankLog");
            
        rank = ranklog.getInt("Rank");
            
        JSONObject account = serverstate.getJSONObject("Account"); 
    
        victory = account.getInt("WinsInPlaytestEnvironment");
        defeat = account.getInt("LossesInPlaytestEnvironment");
            
        JSONObject matchhistory = serverstate.getJSONObject("MatchHistory");
            
        JSONArray historyleague = matchhistory.getJSONArray("HistoryPerLeague");
            
        JSONObject recentgames = historyleague.getJSONObject(0);
            
        streak = recentgames.getInt("WinningStreak");
        streak = (streak < 0) ? 0 : streak;
            
        rate = (float)recentgames.getFloat("RecentWinRate");
        
    }
    
    /**********/
     public String getGeneralString()
    {
        String s = "";
        
        s += "Rank : " + rank + "\n";
        s += "Victories : " + victory + "\n";
        s += "Defeats : " + defeat;
        
        return s;
    }
    
     public String getRecentString()
    {
        String s = "";
        s += "Win Streak : " + streak + "\n";
        s += "Win Rate : " + String.format("%d",(int)(rate*100)) + "%";

        return s;
    }

    /**********/
     public void run() 
    {
        if( ts != file.lastModified() ) 
        {
            ts = file.lastModified();
            
            //update and redraw
            update();

            redraw();
        }
    }
}


    public void settings() { size(400, 900, P2D);
smooth(); }

    static public void main(String[] passedArgs) {
        String[] appletArgs = new String[] { "PSNAP" };
        if (passedArgs != null) {
            PApplet.main(concat(appletArgs, passedArgs));
        } else {
            PApplet.main(appletArgs);
        }
    }
}
